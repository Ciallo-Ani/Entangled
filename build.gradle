plugins {
    id "fabric-loom" version "0.12-SNAPSHOT"
}

version = project.mod_version + "-fabric-" + project.minecraft_suffix
group = project.maven_group
archivesBaseName = project.mod_id

sourceCompatibility = JavaLanguageVersion.of(project.java_target)
targetCompatibility = JavaLanguageVersion.of(project.java_target)

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))

repositories {
    flatDir {
        dirs "libs"
    }
    maven {
        url "https://www.cursemaven.com"
    }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    // Official mappings
    mappings loom.officialMojangMappings()

    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // Core library
//    implementation fg.deobf("curse.maven:supermartijn642s-core-lib-454372:${project.core_library_file}")
    modImplementation "com.supermartijn642:supermartijn642corelib:1.1.0-fabric-mc1.18"
//    // Config library
//    implementation fg.deobf("curse.maven:supermartijn642s-config-lib-438332:${project.config_library_file}")
    modImplementation "com.supermartijn642:supermartijn642configlib:1.1.0-fabric-mc1.18"

    // Team Reborn Energy API
    modCompileOnly("teamreborn:energy:${project.team_reborn_energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    // Jade
    modImplementation "curse.maven:jade-324717:${project.jade_version}"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir "src/generated/resources" }

processResources {
    inputs.property "version", project.version

    filesMatching(["fabric.mod.json", "modid.mixins.json", "pack.mcmeta"]) {
        expand project.properties
    }

    exclude "**/*.pdn"

    rename "^icon.png\$", "${project.mod_id}.png"
    rename "^modid.accesswidener\$", "${project.mod_id}.accesswidener"
    rename "^modid.mixins.json\$", "${project.mod_id}.mixins.json"
}

loom {
    accessWidenerPath = file("src/main/resources/modid.accesswidener")

    loom {
        runs {
            // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
            datagenClient {
                inherit client
                name "Minecraft Datagen"
                vmArg "-Dfabric-api.datagen"
                vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"
                vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
                vmArg "-Dfabric-api.datagen.manual-dir=${file("src/main/resources")}"

                ideConfigGenerated = true
                runDir "build/datagen"
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = Integer.parseInt((String) project.java_target)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}
